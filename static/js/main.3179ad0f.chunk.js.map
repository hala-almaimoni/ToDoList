{"version":3,"sources":["logo.svg","ToDo.js","list.js","Done.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ToDo","state","clicked","done","task","markToDone","event","_this","setState","passVlue","preventDefault","props","addToDone","id","react_default","a","createElement","className","this","onChange","name","type","value","class","onClick","Component","List","taskObject","taskList","updateForm","newTask","target","originalState","copy","Object","assign","key","localStorage","setItem","submitForm","slice","push","JSON","stringify","clearAll","splice","hydrateStateWithLocalStorage","window","addEventListener","saveStateToLocalStorage","bind","removeEventListener","hasOwnProperty","getItem","parse","defineProperty","e","_this2","list","map","index","src_ToDo","onSubmit","placeholder","App","src_list","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3179ad0f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nclass ToDo extends Component {\n    state = {\n        clicked: 'false',\n        done: {\n            task: ''\n        }\n\n    }\n    markToDone = (event) => {\n        if (this.state.clicked === 'false') {\n            this.setState({ clicked: 'clicked' })\n        } else {\n            this.setState({ clicked: 'false' })\n        }\n\n    }\n\n    // addToDone = (event) => {\n    //     let checked = event.target.value\n    //     var originalState = this.state.done\n    //     var copy = Object.assign({}, originalState)\n\n\n    //     if (event.target.checked === true) {\n    //         copy.task = checked\n    //         this.setState({ done: copy })\n    //         console.log(copy)\n    //     }\n    // }\n    passVlue = (event) => {\n        event.preventDefault()\n        this.props.addToDone(this.props.id)\n    }\n\n    render() {\n        return (\n            <div>\n                <form>\n                    <label className=\"container\">\n                        <h3 className={this.state.clicked}>\n                            <input onChange={this.markToDone} name='checkboxlist' type='checkbox' value={this.props.task.task} />\n                            <span class=\"checkmark\"></span>\n                            {this.props.task.task}\n                            <button className=\"add-button\" onClick={this.passVlue} value={this.props.task.task}>X</button></h3>\n\n                    </label>\n                </form>\n\n            </div>\n        );\n    }\n}\n\nexport default ToDo;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Task from './ToDo'\nimport Done from './Done';\n\nclass List extends Component {\n\n    state = {\n        taskObject: {},\n        taskList: [],\n\n    }\n    componentDidMount() {\n        this.hydrateStateWithLocalStorage();\n\n        // add event listener to save state to localStorage\n        // when user leaves/refreshes the page\n        window.addEventListener(\n            \"beforeunload\",\n            this.saveStateToLocalStorage.bind(this)\n        );\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\n            \"beforeunload\",\n            this.saveStateToLocalStorage.bind(this)\n        );\n\n        // saves if component has a chance to unmount\n        this.saveStateToLocalStorage();\n    }\n\n    hydrateStateWithLocalStorage() {\n        // for all items in state\n        for (let key in this.state) {\n            // if the key exists in localStorage\n            if (localStorage.hasOwnProperty(key)) {\n                // get the key's value from localStorage\n                let value = localStorage.getItem(key);\n\n                // parse the localStorage string and setState\n                try {\n                    value = JSON.parse(value);\n                    this.setState({ [key]: value });\n                } catch (e) {\n                    // handle empty string\n                    this.setState({ [key]: value });\n                }\n            }\n        }\n    }\n\n    saveStateToLocalStorage() {\n        // for every item in React state\n        for (let key in this.state) {\n            // save to localStorage\n            localStorage.setItem(key, JSON.stringify(this.state[key]));\n        }\n    }\n\n    updateForm = (event) => {\n        const newTask = event.target.value\n        const originalState = this.state.taskObject\n        var copy = Object.assign({}, originalState)\n        const key = event.target.name\n        copy[key] = newTask;\n        this.setState({ taskObject: copy })\n\n        localStorage.setItem(key, copy[key]);\n\n\n\n    }\n\n    submitForm = (event) => {\n        event.preventDefault()\n        const copy = this.state.taskList.slice()\n        copy.push(this.state.taskObject)\n        this.setState({\n            taskList: copy,\n            taskObject: {\n                task: '',\n            }\n        })\n        localStorage.setItem(\"taskList\", JSON.stringify(copy));\n        localStorage.setItem(\"task\", \"\");\n    }\n\n\n\n\n\n    render() {\n\n\n        const list = this.state.taskList.map((task, index) => <Task task={task} addToDone={this.addToDone} id={index} />)\n\n        return (\n            <div className=\"cover\">\n                <div className=\"containerl\">\n                    <form className=\"form-list\" onSubmit={this.submitForm}>\n                        <input placeholder=\"To do\" type='text' className='input-task' onChange={this.updateForm} name='task' value={this.state.taskObject.task} />\n                        <button className=\"main-button\" type='submit'>Add</button>\n\n                    </form>\n                    {list}\n                    <button className=\"main-button\" onClick={this.clearAll}>Clear All</button>\n                </div>\n\n            </div>\n        );\n    }\n    clearAll = () => this.setState({ taskList: [] })\n    addToDone = task => {\n        const copy = this.state.taskList.slice()\n        copy.splice(task, 1)\n        this.setState({ taskList: copy })\n        localStorage.setItem(\"taskList\", JSON.stringify(copy));\n\n    }\n\n\n}\n\nexport default List;\n","import React, { Component } from 'react';\nimport './App.css';\n\nclass Done extends Component {\n    render() {\n        return (\n            <div>\n            </div>\n        );\n    }\n}\n\nexport default Done;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport List from './list';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <List />\n        {/* <h4>Never put off till tomorrow... whatâ€™ll wait till the day after <img src=\"https://www.reactiongifs.us/wp-content/uploads/2018/01/giphy.gif\" height=\"70px\" /></h4> */}\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}